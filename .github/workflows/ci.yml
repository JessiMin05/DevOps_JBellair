name: Java CI with Maven

on:
 workflow_dispatch:
    inputs:
      version:
        description: 'Semantic Versioning: Docker'
        required: true
        default: '1.0.0'

jobs:
  BuildWithTesting:
    runs-on: ubuntu-latest
    steps:
      # Checkout codebase
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Building with Maven
      - name: Build with Maven and copy dependencies
        run: |
         mvn clean package
         mvn dependency:copy-dependencies -DoutputDirectory=target/dependency

      # Testing via JaCoCo/Surefire
      - name: Junit Test Dashboard
        uses: janisz/action@v2
        with:
          paths: target/surefire-reports/*.xml
          output: test-results.md
          show: all

      # Upload Test Results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.md
            target/surefire-reports/*.xml

      # Upload JAR
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      # Upload compiled classes
      - name: Upload compiled classes
        uses: actions/upload-artifact@v4
        with:
          name: compiled-classes
          path: target/classes/      

  Analysis:
    needs: BuildWithTesting
    runs-on: ubuntu-latest
    steps:
      # Checkout codebase
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Download JAR
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      # Download compiled classes
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: compiled-classes
          path: target/classes/
      # Lint Code Base
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_JAVA: true
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # SonarQube  
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps_JBellair -Dsonar.projectName='DevOps_JBellair'

  Docker:
    needs: Analysis
    runs-on: ubuntu-latest
    steps:
      # Download JAR
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/
      # Docker
      - name: Build & Push Docker image
        run: |
          echo "Using Docker tag: ${{ github.event.inputs.version }}"
          mvn io.fabric8:docker-maven-plugin:0.41.0:build \
              io.fabric8:docker-maven-plugin:0.41.0:push \
              -Ddocker.username=${{ secrets.DOCKER_USER }} \
              -Ddocker.password=${{ secrets.DOCKER_PASSWORD }} \
              -Ddocker.image.tag=${{ github.event.inputs.version }} \
              -DskipTests

  CleanUp:
    needs: Docker
    runs-on: ubuntu-latest
    steps:
      # Docker logout
      - name: Docker logout
        run: |
          echo "Logging out from Docker"
          docker logout

      # Remove Artifacts
      - name: Remove JAR and compiled classes
        run: |
          echo "Removing JAR and compiled classes"
          rm -f target/*.jar
          rm -rf target/classes/